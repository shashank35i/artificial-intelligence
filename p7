import collections

def bfs(graph, start):
    visited = set()  # To keep track of visited nodes
    queue = collections.deque([start])  # Initialize the queue with the start node
    visited.add(start)  # Mark the start node as visited

    while queue:  # Continue until the queue is empty
        node = queue.popleft()  # Get the next node from the queue
        print(node)  # Print or process the node

        # Explore neighbors of the current node
        for neighbour in graph[node]:
            if neighbour not in visited:  # Check if the neighbour is not visited
                visited.add(neighbour)  # Mark the neighbour as visited
                queue.append(neighbour)  # Add the neighbour to the queue for further exploration

if __name__ == '__main__':
    # Example graph represented as an adjacency list
    graph = {0: [1, 2], 1: [2], 2: [3], 3: [1, 2]}
    bfs(graph, 0)  # Start BFS from node 0

